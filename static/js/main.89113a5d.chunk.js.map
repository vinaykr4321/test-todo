{"version":3,"sources":["components/Header/Header.jsx","components/Todo/Todo.jsx","components/TodoForm/TodoForm.jsx","components/TodoList/TodoList.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","Todo","props","clickHandler","bind","value","this","removeTodo","onClick","text","name","toUpperCase","React","Component","TodoForm","state","todoText","submitHandler","changeHandler","event","setState","target","evt","preventDefault","addTodo","form","reset","onSubmit","ref","frm","type","placeholder","onChange","TodoList","todos","todo","filter","oldTodo","map","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uTASeA,G,YALA,kBACX,wBAAIC,UAAU,WAAd,KAA0B,0BAAMA,UAAU,cAAhB,S,0CCkBfC,G,wDAjBX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAEDC,aAAe,EAAKA,aAAaC,KAAlB,gBAHN,E,yDAMLC,GACTC,KAAKJ,MAAMK,WAAWF,K,+BAGjB,IAAD,OACJ,OACI,wBAAIG,QAAS,kBAAM,EAAKL,aAAa,EAAKD,MAAMO,OAAOC,KAAMJ,KAAKJ,MAAMO,MAAOH,KAAKJ,MAAMO,KAAKE,mB,GAbxFC,IAAMC,YC6BVC,G,wDA7BX,WAAYZ,GAAO,IAAD,8BACd,cAAMA,IAEDa,MAAQ,CAACC,SAAU,IACxB,EAAKC,cAAgB,EAAKA,cAAcb,KAAnB,gBACrB,EAAKc,cAAgB,EAAKA,cAAcd,KAAnB,gBALP,E,0DAQJe,GACVb,KAAKc,SAAS,CAACJ,SAAUG,EAAME,OAAOhB,U,oCAG5BiB,GACVA,EAAIC,iBACJjB,KAAKJ,MAAMsB,QAAQlB,KAAKS,MAAMC,UAC9BV,KAAKc,SAAS,CAACJ,SAAU,KACzBV,KAAKmB,KAAKC,U,+BAGL,IAAD,OACJ,OACI,0BAAMC,SAAUrB,KAAKW,cAAeW,IAAK,SAAAC,GAAG,OAAI,EAAKJ,KAAOI,GAAK7B,UAAU,QACvE,2BAAO8B,KAAK,OAAOpB,KAAK,OAAOV,UAAU,UAAU+B,YAAY,OAAOC,SAAU1B,KAAKY,gBACrF,4BAAQlB,UAAU,OAAlB,e,GAxBOY,IAAMC,YC0CdoB,G,wDArCX,WAAY/B,GAAO,IAAD,8BACd,cAAMA,IAEDa,MAAQ,CAAEmB,MAAO,IAEtB,EAAKV,QAAU,EAAKA,QAAQpB,KAAb,gBACf,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBANJ,E,oDASV+B,GACJ7B,KAAKc,SAAS,CACVc,MAAM,GAAD,mBAAM5B,KAAKS,MAAMmB,OAAjB,CAAwB,CAACzB,KAAK0B,S,iCAIhCA,GACP7B,KAAKc,SAAS,CACVc,MAAO5B,KAAKS,MAAMmB,MAAME,QAAO,SAAAC,GAAO,OAAIA,EAAQ5B,OAAS0B,S,+BAI1D,IAAD,OACED,EAAQ5B,KAAKS,MAAMmB,MACzB,OACI,6BACI,4BAEQA,EAAMI,KAAI,SAACH,EAAMI,GAAP,OAAiB,kBAAC,EAAD,CAAMC,IAAKD,EAAO9B,KAAM0B,EAAK1B,KAAMF,WAAY,EAAKA,iBAGvF,kBAAC,EAAD,CAAWiB,QAASlB,KAAKkB,e,GA/BlBZ,IAAMC,Y,MCQd4B,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.89113a5d.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Header.css';\n\nconst Header = () => (\n    <h1 className=\"heading\">To<span className=\"heading-do\">Do</span></h1>\n);\n\n\nexport default Header;","import React from 'react';\n\n\nimport './Todo.css';\n\nclass Todo extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.clickHandler = this.clickHandler.bind(this);\n    }\n\n    clickHandler(value){\n        this.props.removeTodo(value);\n    }\n\n    render(){\n        return (\n            <li onClick={() => this.clickHandler(this.props.text)} name={this.props.text}>{this.props.text.toUpperCase()}</li>\n        )\n    }\n}\n\nexport default Todo;","import React from 'react';\n\nimport './TodoForm.css';\n\nclass TodoForm extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state = {todoText: ''}\n        this.submitHandler = this.submitHandler.bind(this);\n        this.changeHandler = this.changeHandler.bind(this);\n    }\n\n    changeHandler(event){\n        this.setState({todoText: event.target.value});\n    }\n\n    submitHandler(evt){\n        evt.preventDefault();\n        this.props.addTodo(this.state.todoText);\n        this.setState({todoText: ''});\n        this.form.reset();\n    }\n\n    render(){\n        return(\n            <form onSubmit={this.submitHandler} ref={frm => this.form = frm} className=\"form\">\n                <input type=\"text\" name=\"todo\" className=\"textbox\" placeholder=\"TODO\" onChange={this.changeHandler} />\n                <button className=\"btn\">Submit</button>\n            </form>\n        )\n    }\n}\n\nexport default TodoForm;","import React from 'react';\nimport Todo from '../Todo/Todo';\nimport TodoForm from '../TodoForm/TodoForm';\n\n\nimport './TodoList.css';\n\n\nclass TodoList extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state = { todos: [] }\n\n        this.addTodo = this.addTodo.bind(this);\n        this.removeTodo = this.removeTodo.bind(this);\n    }\n\n    addTodo(todo){\n        this.setState({\n            todos: [...this.state.todos, {text:todo}]\n        })\n    }\n\n    removeTodo(todo){\n        this.setState({\n            todos: this.state.todos.filter(oldTodo => oldTodo.text !== todo)\n        })\n    }\n\n    render(){\n        const todos = this.state.todos;\n        return (\n            <div>\n                <ul>\n                    {\n                        todos.map((todo, index) => <Todo key={index} text={todo.text} removeTodo={this.removeTodo} />)\n                    }\n                </ul>\n                <TodoForm  addTodo={this.addTodo} />\n            </div>\n        )\n    }\n\n}\n\nexport default TodoList;","import React from 'react';\nimport Header from \"./components/Header/Header\";\nimport TodoList from './components/TodoList/TodoList';\n\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div >\n      <Header />\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}